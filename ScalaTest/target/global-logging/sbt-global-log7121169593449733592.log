[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\bjark\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\bjark\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.2)
[debug]       Load.loadUnit: plugins took 61.5182ms
[debug]       Load.loadUnit: defsScala took 0.2594ms
[debug] [Loading] Scanning directory C:\Users\bjark\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bjark\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.3577 ms
[debug]           Load.resolveProject(global-plugins) took 35.2551ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\bjark\.sbt\1.0\plugins, plugins: List(<none>))) took 63.1482ms
[debug] [Loading] Done in C:\Users\bjark\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 80.7141ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1503ms
[debug]     Load.loadUnit(file:/C:/Users/bjark/.sbt/1.0/plugins/, ...) took 149.8875ms
[debug]   Load.apply: load took 305.6274ms
[debug]   Load.apply: resolveProjects took 4.7064ms
[debug]   Load.apply: finalTransforms took 64.0556ms
[debug]   Load.apply: config.delegates took 14.6831ms
[debug]   Load.apply: Def.make(settings)... took 482.9945ms
[debug]   Load.apply: structureIndex took 113.4622ms
[debug]   Load.apply: mkStreams took 3.9035ms
[info] loading global plugins from C:\Users\bjark\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2065.8024ms
[debug]           Load.loadUnit: plugins took 16.208ms
[debug]           Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest\project
[debug]             Load.loadUnit: mkEval took 7.3139ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4761 ms
[info] loading settings for project scalatest-build from idea.sbt ...
[debug]               Load.resolveProject(scalatest-build) took 2.4366ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalatest-build, base: C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest\project, plugins: List(<none>))) took 4.5607ms
[debug] [Loading] Done in C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest\project, returning: (scalatest-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1791.3554ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.5109ms
[debug]         Load.loadUnit(file:/C:/Users/bjark/Documents/Uni/SC/SoftwareCorrectness/ScalaTest/project/, ...) took 1813.983ms
[debug]       Load.apply: load took 1815.1424ms
[debug]       Load.apply: resolveProjects took 0.0783ms
[debug]       Load.apply: finalTransforms took 5.2909ms
[debug]       Load.apply: config.delegates took 0.3292ms
[debug]       Load.apply: Def.make(settings)... took 42.0245ms
[debug]       Load.apply: structureIndex took 19.522ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3648.3494ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest
[debug]       Load.loadUnit: mkEval took 0.1771ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2567 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 24.6602ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest, plugins: List(<none>))) took 26.9239ms
[debug] [Loading] Done in C:\Users\bjark\Documents\Uni\SC\SoftwareCorrectness\ScalaTest, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1063.1646ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.9092ms
[debug]   Load.loadUnit(file:/C:/Users/bjark/Documents/Uni/SC/SoftwareCorrectness/ScalaTest/, ...) took 4728.1536ms
[debug] Load.apply: load took 4729.7138ms
[debug] Load.apply: resolveProjects took 0.1916ms
[debug] Load.apply: finalTransforms took 16.0263ms
[debug] Load.apply: config.delegates took 0.2079ms
[debug] Load.apply: Def.make(settings)... took 37.6772ms
[debug] Load.apply: structureIndex took 14.7333ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to untitled (in build file:/C:/Users/bjark/Documents/Uni/SC/SoftwareCorrectness/ScalaTest/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51733 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51733, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to untitled (in build file:/C:/Users/bjark/Documents/Uni/SC/SoftwareCorrectness/ScalaTest/)
[debug] > Exec(idea-shell, None, None)
